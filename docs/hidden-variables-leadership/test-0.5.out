
R version 2.12.1 (2010-12-16)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## 20091123
> ## simus singesbeproc
> 
> GroupSize = 10;
> TauInitiationBase = rep(1290*GroupSize, GroupSize);
> TauRenonceAlpha = rep(0.009,GroupSize);
> TauRenonceGamma = rep(2, GroupSize);
> TauRenonceEpsilon = rep(2.3, GroupSize);
> TauSuiviAlpha = rep(162.3, GroupSize);
> TauSuiviBeta  = rep(75.4, GroupSize);
> 
> TauInitiation = function(qui)
+   {
+     return ( TauInitiationBase[qui] );
+   }
> TauRenonce   = function(qui,partis)
+   {
+     return ( 1/ ( TauRenonceAlpha[qui]/(1+(partis/TauRenonceGamma[qui])^TauRenonceEpsilon[qui]) ) );
+   }
> TauSuivi = function(qui, partis)
+   {
+     return ( TauSuiviAlpha + TauSuiviBeta*(GroupSize-partis)/partis );
+   }
> 
>  
> InitNb = 10000 ;
> ## moving size
> MoveSizes = rep(0, GroupSize);
> ## nb of attempts per indiv
> Attempts = rep(0,GroupSize);
> ## nb of success per indiv
> Successs = rep(0,GroupSize);
> ##  moving orders
> Ordres = matrix(0,GroupSize,GroupSize);
> 
> 
> for (initrank in 1:InitNb)
+   {
+     #########    UNE SIMU\n");
+     ordreDeparts = c();
+     simul = data.frame(
+       ident = 1:GroupSize,
+       Restant = rep(1,GroupSize));
+     simul$NextDates = rexp(GroupSize, 1/TauInitiation(simul$ident));
+     initiateur = which.min(simul$NextDates);
+     simul$Restant[initiateur]=0;
+     ordreDeparts = c(ordreDeparts,initiateur);
+     Attempts[initiateur] = Attempts[initiateur]+1;
+     
+     ## cat("\n\n\n") ; print(simul);
+     while (1)
+       {
+         stillthere = length(which(simul$Restant==1));
+         partis = GroupSize - stillthere;
+         if (stillthere<1) break;
+ 
+         simul$NextDates = rexp(GroupSize, 1/(0.5*(TauSuivi(simul$ident,partis))));
+         simul$NextDates[simul$Restant<1]=NA;
+         suiveur = which.min(simul$NextDates);
+ 
+         dateRenonce = rexp(1,1/TauRenonce(initiateur,partis));
+ 
+         if (dateRenonce < simul$NextDates[suiveur]) {
+           ## cat("## give-up at ",dateRenonce,"  (< ",suiveur," = ",simul$NextDates[suiveur],")\n");
+           break;
+         } else {
+           simul$Restant[suiveur]=0;
+           ordreDeparts = c(ordreDeparts,suiveur);
+         }
+         ## cat("\n"); print(simul); print(ordreDeparts);
+       }
+     ###############################
+     
+     ## stocker le resultat
+     ##     histo des tailles
+     MoveSizes[partis] = MoveSizes[partis]+1;
+     ## success
+     if (partis == GroupSize)
+           Successs[initiateur] = Successs[initiateur]+1;
+ 
+     ##     ordres
+     if (length(ordreDeparts)>1)
+       {
+         for (indiv in 1:(length(ordreDeparts)-1))
+           {
+             for (follow in (indiv+1):length(ordreDeparts))
+               {
+                 Ordres[ordreDeparts[indiv],ordreDeparts[follow]] = Ordres[ordreDeparts[indiv],ordreDeparts[follow]]+1;
+               }
+           }
+       }
+   }
> RepartSuccess = Successs/sum(Successs);
> LeaderRepart = RepartSuccess[1]/(1/GroupSize);
> AllResults = list(MoveSizes = MoveSizes,Attempts  = Attempts,Successs  = Successs,Orders    = Ordres);
> #save(AllResults, file="all-equal.rda");
> print(AllResults);
$MoveSizes
 [1] 2574  863  410  218  124  107   93   89  145 5377

$Attempts
 [1] 1019  996 1036 1058  968  998 1004  965  980  976

$Successs
 [1] 536 563 534 559 547 539 535 511 524 529

$Orders
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    0 2861 2861 2853 2899 2865 2907 2851 2844  2852
 [2,] 2871    0 2856 2859 2869 2912 2848 2904 2888  2913
 [3,] 2891 2879    0 2867 2849 2852 2860 2859 2859  2880
 [4,] 2870 2866 2873    0 2917 2848 2849 2914 2896  2861
 [5,] 2825 2847 2891 2800    0 2841 2888 2846 2884  2843
 [6,] 2885 2820 2895 2882 2894    0 2910 2863 2924  2880
 [7,] 2834 2873 2877 2900 2830 2832    0 2896 2937  2875
 [8,] 2862 2794 2869 2788 2865 2859 2815    0 2849  2816
 [9,] 2880 2840 2874 2841 2851 2804 2808 2876    0  2855
[10,] 2877 2827 2862 2867 2900 2881 2860 2900 2881     0

> 
